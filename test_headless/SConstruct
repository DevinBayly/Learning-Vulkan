#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess

# `scons p=linux` to compile for linux
# `scons p=windows` to compile for windows

# on linux you can optionally use `use_llvm=yes` to use clang instead of gcc

project_name = "vulkan_tutorial"
output_folder = "bin/"

# TODO Platform-independent Vulkan SDK path

#------------------------------------------------------------------------------
# my glsllang converter build
shader_bld = Builder(action = "glslangValidator -V $SOURCE -o $TARGET")
import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})
#env = Environment()

if ARGUMENTS.get('use_llvm', 'no') == 'yes':
	env['CXX'] = 'clang++'

target = ARGUMENTS.get('target', 'release')
platform = ARGUMENTS.get('p', 'linux')
vpath = os.environ["VULKAN_SDK"]
vulkan_sdk_dir = vpath



#------------------------------------------------------------------------------
#env['TARGET_ARCH'] = 'x86_64'

env.Append(LIBS = [
	"vulkan",
	"glfw"
])
# env.Append(CPPPATH = [
# 	"thirdparty/glfw/include",
#     "./include",
# 	"$VULKAN_SDK/include"
# 	"."
# ])

env.Append(CPPPATH = [
	vpath+"/include"
]
)
env.Append(LIBPATH=[
	f"{vpath}/lib"
])

if platform == 'linux':

	env.Append(CCFLAGS = ['-g','-O3', '-std=c++17'])
	env.Append(LINKFLAGS = ['-Wl,-R,\'$$ORIGIN\''])
	# TODO Linux setup
#------------------------------------------------------------------------------
sources = []

def add_sources(sources, dir):
	for f in os.listdir(dir):
		if f.endswith('.cpp') or f.endswith('.c'):
			sources.append(dir + '/' + f)

add_sources(sources, 'src')
#------------------------------------------------------------------------------

env.Append(BUILDERS ={"ShaderComp":shader_bld})
env.ShaderComp("src/vert.spv","src/shader.vert")
env.ShaderComp("src/frag.spv","src/shader.frag")
env.Program(target=(output_folder + project_name), source=sources)
# Default(program)